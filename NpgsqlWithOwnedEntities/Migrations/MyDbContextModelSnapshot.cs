// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlWithOwnedEntities;

namespace NpgsqlWithOwnedEntities.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("inventory")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("NpgsqlWithOwnedEntities.StockItems.ItemTransaction", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id")
                        .HasColumnType("integer");

                    b.Property<string>("ActorDepartment")
                        .HasColumnName("actor_department")
                        .HasColumnType("text");

                    b.Property<string>("ActorEmployeeId")
                        .HasColumnName("actor_employee_id")
                        .HasColumnType("text");

                    b.Property<string>("ActorName")
                        .HasColumnName("actor_name")
                        .HasColumnType("text");

                    b.Property<string>("ActorPhoneNumer")
                        .HasColumnName("actor_phone_numer")
                        .HasColumnType("text");

                    b.Property<string>("ChangedBy")
                        .HasColumnName("changed_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ChangedOn")
                        .HasColumnName("changed_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnName("discriminator")
                        .HasColumnType("text");

                    b.Property<DateTime>("FulfilledOn")
                        .HasColumnName("fulfilled_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("InventoryBeforeBaseUnit")
                        .HasColumnName("inventory_before_base_unit")
                        .HasColumnType("text");

                    b.Property<decimal?>("InventoryBeforeBaseUnitValue")
                        .HasColumnName("inventory_before_base_unit_value")
                        .HasColumnType("numeric");

                    b.Property<string>("InventoryBeforeDisplayUnit")
                        .HasColumnName("inventory_before_display_unit")
                        .HasColumnType("text");

                    b.Property<string>("InventoryNowBaseUnit")
                        .HasColumnName("inventory_now_base_unit")
                        .HasColumnType("text");

                    b.Property<decimal?>("InventoryNowBaseUnitValue")
                        .HasColumnName("inventory_now_base_unit_value")
                        .HasColumnType("numeric");

                    b.Property<string>("InventoryNowDisplayUnit")
                        .HasColumnName("inventory_now_display_unit")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnName("note")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RequestedOn")
                        .HasColumnName("requested_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("StockItemId")
                        .HasColumnName("stock_item_id")
                        .HasColumnType("integer");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id")
                        .HasName("pk_item_transactions");

                    b.HasIndex("StockItemId")
                        .HasName("ix_item_transactions_stock_item_id");

                    b.ToTable("item_transactions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ItemTransaction");
                });

            modelBuilder.Entity("NpgsqlWithOwnedEntities.StockItems.StockItem", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id")
                        .HasColumnType("integer");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnName("barcode")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ChangedBy")
                        .HasColumnName("changed_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ChangedOn")
                        .HasColumnName("changed_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Compartment")
                        .HasColumnName("compartment")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Department")
                        .HasColumnName("department")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("InventoryBaseUnit")
                        .HasColumnName("inventory_base_unit")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("InventoryBaseUnitValue")
                        .HasColumnName("inventory_base_unit_value")
                        .HasColumnType("numeric");

                    b.Property<string>("InventoryDisplayUnit")
                        .HasColumnName("inventory_display_unit")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("MinimumInventoryBaseUnit")
                        .HasColumnName("minimum_inventory_base_unit")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("MinimumInventoryBaseUnitValue")
                        .HasColumnName("minimum_inventory_base_unit_value")
                        .HasColumnType("numeric");

                    b.Property<string>("MinimumInventoryDisplayUnit")
                        .HasColumnName("minimum_inventory_display_unit")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Note")
                        .HasColumnName("note")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("status")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<int>("StoreId")
                        .HasColumnName("store_id")
                        .HasColumnType("integer");

                    b.Property<int>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("integer");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id")
                        .HasName("pk_stock_items");

                    b.HasIndex("StoreId")
                        .HasName("ix_stock_items_store_id");

                    b.ToTable("stock_items");
                });

            modelBuilder.Entity("NpgsqlWithOwnedEntities.Stores.Store", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id")
                        .HasColumnType("integer");

                    b.Property<string>("Building")
                        .IsRequired()
                        .HasColumnName("building")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ChangedBy")
                        .HasColumnName("changed_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ChangedOn")
                        .HasColumnName("changed_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CheckedInItemCount")
                        .HasColumnName("checked_in_item_count")
                        .HasColumnType("integer");

                    b.Property<int>("CheckedOutItemCount")
                        .HasColumnName("checked_out_item_count")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DefaultLocation")
                        .HasColumnName("default_location")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("DiscardedItemCount")
                        .HasColumnName("discarded_item_count")
                        .HasColumnType("integer");

                    b.Property<int>("ItemsToBeCheckedOutCount")
                        .HasColumnName("items_to_be_checked_out_count")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Room")
                        .HasColumnName("room")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Site")
                        .HasColumnName("site")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("integer");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id")
                        .HasName("pk_stores");

                    b.ToTable("stores");
                });

            modelBuilder.Entity("NpgsqlWithOwnedEntities.StockItems.CheckingIn", b =>
                {
                    b.HasBaseType("NpgsqlWithOwnedEntities.StockItems.ItemTransaction");

                    b.HasDiscriminator().HasValue("CheckingIn");
                });

            modelBuilder.Entity("NpgsqlWithOwnedEntities.StockItems.CheckingOut", b =>
                {
                    b.HasBaseType("NpgsqlWithOwnedEntities.StockItems.ItemTransaction");

                    b.Property<string>("RecipientDepartment")
                        .HasColumnName("recipient_department")
                        .HasColumnType("text");

                    b.Property<string>("RecipientEmployeeId")
                        .HasColumnName("recipient_employee_id")
                        .HasColumnType("text");

                    b.Property<string>("RecipientName")
                        .HasColumnName("recipient_name")
                        .HasColumnType("text");

                    b.Property<string>("RecipientPhoneNumer")
                        .HasColumnName("recipient_phone_numer")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("CheckingOut");
                });

            modelBuilder.Entity("NpgsqlWithOwnedEntities.StockItems.ItemTransaction", b =>
                {
                    b.HasOne("NpgsqlWithOwnedEntities.StockItems.StockItem", "StockItem")
                        .WithMany("ItemTransactions")
                        .HasForeignKey("StockItemId")
                        .HasConstraintName("fk_item_transactions_stock_items_stock_item_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NpgsqlWithOwnedEntities.StockItems.StockItem", b =>
                {
                    b.HasOne("NpgsqlWithOwnedEntities.Stores.Store", null)
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .HasConstraintName("fk_stock_items_stores_store_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("NpgsqlWithOwnedEntities.StockItems.CatalogItemInfo", "CatalogItem", b1 =>
                        {
                            b1.Property<int>("StockItemId")
                                .HasColumnName("id")
                                .HasColumnType("integer");

                            b1.Property<string>("Batch")
                                .HasColumnName("catalog_item_batch")
                                .HasColumnType("character varying(100)")
                                .HasMaxLength(100);

                            b1.Property<string>("CatalogName")
                                .HasColumnName("catalog_item_catalog_name")
                                .HasColumnType("character varying(100)")
                                .HasMaxLength(100);

                            b1.Property<string>("Description")
                                .HasColumnName("catalog_item_description")
                                .HasColumnType("text");

                            b1.Property<string>("ItemNumber")
                                .HasColumnName("catalog_item_item_number")
                                .HasColumnType("text");

                            b1.Property<string>("LeadTime")
                                .HasColumnName("catalog_item_lead_time")
                                .HasColumnType("character varying(100)")
                                .HasMaxLength(100);

                            b1.Property<string>("PackageAmountBaseUnit")
                                .HasColumnName("catalog_item_package_amount_base_unit")
                                .HasColumnType("character varying(50)")
                                .HasMaxLength(50);

                            b1.Property<decimal?>("PackageAmountBaseUnitValue")
                                .HasColumnName("catalog_item_package_amount_base_unit_value")
                                .HasColumnType("numeric");

                            b1.Property<string>("PackageAmountDisplayUnit")
                                .HasColumnName("catalog_item_package_amount_display_unit")
                                .HasColumnType("character varying(50)")
                                .HasMaxLength(50);

                            b1.Property<string>("PackageDescription")
                                .HasColumnName("catalog_item_package_description")
                                .HasColumnType("character varying(100)")
                                .HasMaxLength(100);

                            b1.Property<decimal?>("PriceAmount")
                                .HasColumnName("catalog_item_price_amount")
                                .HasColumnType("numeric");

                            b1.Property<string>("PriceCurrency")
                                .HasColumnName("catalog_item_price_currency")
                                .HasColumnType("character varying(5)")
                                .HasMaxLength(5);

                            b1.Property<string>("Url")
                                .HasColumnName("catalog_item_url")
                                .HasColumnType("character varying(2000)")
                                .HasMaxLength(2000);

                            b1.Property<uint>("xmin")
                                .IsConcurrencyToken()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnName("xmin")
                                .HasColumnType("xid");

                            b1.HasKey("StockItemId")
                                .HasName("pk_stock_items");

                            b1.ToTable("stock_items");

                            b1.WithOwner()
                                .HasForeignKey("StockItemId")
                                .HasConstraintName("fk_stock_items_stock_items_id");

                            b1.OwnsOne("NpgsqlWithOwnedEntities.StockItems.SupplierInfo", "Supplier", b2 =>
                                {
                                    b2.Property<int>("CatalogItemInfoStockItemId")
                                        .HasColumnName("id")
                                        .HasColumnType("integer");

                                    b2.Property<string>("City")
                                        .HasColumnName("catalog_item_supplier_city")
                                        .HasColumnType("character varying(200)")
                                        .HasMaxLength(200);

                                    b2.Property<string>("Country")
                                        .HasColumnName("catalog_item_supplier_country")
                                        .HasColumnType("character varying(200)")
                                        .HasMaxLength(200);

                                    b2.Property<string>("Email")
                                        .HasColumnName("catalog_item_supplier_email")
                                        .HasColumnType("character varying(200)")
                                        .HasMaxLength(200);

                                    b2.Property<int>("Id")
                                        .HasColumnName("catalog_item_supplier_id")
                                        .HasColumnType("integer");

                                    b2.Property<string>("Name")
                                        .HasColumnName("catalog_item_supplier_name")
                                        .HasColumnType("character varying(100)")
                                        .HasMaxLength(100);

                                    b2.Property<string>("Phone")
                                        .HasColumnName("catalog_item_supplier_phone")
                                        .HasColumnType("character varying(100)")
                                        .HasMaxLength(100);

                                    b2.Property<string>("Url")
                                        .HasColumnName("catalog_item_supplier_url")
                                        .HasColumnType("character varying(2000)")
                                        .HasMaxLength(2000);

                                    b2.Property<uint>("xmin")
                                        .IsConcurrencyToken()
                                        .ValueGeneratedOnAddOrUpdate()
                                        .HasColumnName("xmin")
                                        .HasColumnType("xid");

                                    b2.HasKey("CatalogItemInfoStockItemId")
                                        .HasName("pk_stock_items");

                                    b2.ToTable("stock_items");

                                    b2.WithOwner()
                                        .HasForeignKey("CatalogItemInfoStockItemId")
                                        .HasConstraintName("fk_stock_items_stock_items_id");
                                });
                        });

                    b.OwnsOne("NpgsqlWithOwnedEntities.StockItems.Employee", "ResponsibleOwner", b1 =>
                        {
                            b1.Property<int>("StockItemId")
                                .HasColumnName("id")
                                .HasColumnType("integer");

                            b1.Property<string>("Department")
                                .HasColumnName("responsible_owner_department")
                                .HasColumnType("character varying(400)")
                                .HasMaxLength(400);

                            b1.Property<string>("EmployeeId")
                                .HasColumnName("responsible_owner_employee_id")
                                .HasColumnType("character varying(400)")
                                .HasMaxLength(400);

                            b1.Property<string>("Name")
                                .HasColumnName("responsible_owner_name")
                                .HasColumnType("character varying(400)")
                                .HasMaxLength(400);

                            b1.Property<string>("PhoneNumber")
                                .HasColumnName("responsible_owner_phone_number")
                                .HasColumnType("character varying(200)")
                                .HasMaxLength(200);

                            b1.Property<uint>("xmin")
                                .IsConcurrencyToken()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnName("xmin")
                                .HasColumnType("xid");

                            b1.HasKey("StockItemId")
                                .HasName("pk_stock_items");

                            b1.ToTable("stock_items");

                            b1.WithOwner()
                                .HasForeignKey("StockItemId")
                                .HasConstraintName("fk_stock_items_stock_items_id");
                        });

                    b.OwnsOne("NpgsqlWithOwnedEntities.StockItems.Employee", "TransferredFor", b1 =>
                        {
                            b1.Property<int>("StockItemId")
                                .HasColumnName("id")
                                .HasColumnType("integer");

                            b1.Property<string>("Department")
                                .HasColumnName("transferred_for_department")
                                .HasColumnType("character varying(400)")
                                .HasMaxLength(400);

                            b1.Property<string>("EmployeeId")
                                .HasColumnName("transferred_for_employee_id")
                                .HasColumnType("character varying(400)")
                                .HasMaxLength(400);

                            b1.Property<string>("Name")
                                .HasColumnName("transferred_for_name")
                                .HasColumnType("character varying(400)")
                                .HasMaxLength(400);

                            b1.Property<string>("PhoneNumber")
                                .HasColumnName("transferred_for_phone_number")
                                .HasColumnType("character varying(200)")
                                .HasMaxLength(200);

                            b1.Property<uint>("xmin")
                                .IsConcurrencyToken()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnName("xmin")
                                .HasColumnType("xid");

                            b1.HasKey("StockItemId")
                                .HasName("pk_stock_items");

                            b1.ToTable("stock_items");

                            b1.WithOwner()
                                .HasForeignKey("StockItemId")
                                .HasConstraintName("fk_stock_items_stock_items_id");
                        });

                    b.OwnsOne("NpgsqlWithOwnedEntities.StockItems.Product", "Product", b1 =>
                        {
                            b1.Property<int>("StockItemId")
                                .HasColumnName("id")
                                .HasColumnType("integer");

                            b1.Property<string>("Description")
                                .HasColumnName("product_description")
                                .HasColumnType("text");

                            b1.Property<string>("Name")
                                .HasColumnName("product_name")
                                .HasColumnType("character varying(2000)")
                                .HasMaxLength(2000);

                            b1.Property<string>("Producer")
                                .HasColumnName("product_producer")
                                .HasColumnType("character varying(100)")
                                .HasMaxLength(100);

                            b1.Property<string>("ProducerItemNumber")
                                .HasColumnName("product_producer_item_number")
                                .HasColumnType("character varying(100)")
                                .HasMaxLength(100);

                            b1.Property<decimal?>("Purity")
                                .HasColumnName("product_purity")
                                .HasColumnType("numeric");

                            b1.Property<string>("Unspsc")
                                .HasColumnName("product_unspsc")
                                .HasColumnType("character varying(10)")
                                .HasMaxLength(10);

                            b1.Property<string>("Url")
                                .HasColumnName("product_url")
                                .HasColumnType("character varying(2000)")
                                .HasMaxLength(2000);

                            b1.Property<uint>("xmin")
                                .IsConcurrencyToken()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnName("xmin")
                                .HasColumnType("xid");

                            b1.HasKey("StockItemId")
                                .HasName("pk_stock_items");

                            b1.ToTable("stock_items");

                            b1.WithOwner()
                                .HasForeignKey("StockItemId")
                                .HasConstraintName("fk_stock_items_stock_items_id");
                        });

                    b.OwnsOne("NpgsqlWithOwnedEntities.StockItems.Reservation", "Reservation", b1 =>
                        {
                            b1.Property<int>("StockItemId")
                                .HasColumnName("id")
                                .HasColumnType("integer");

                            b1.Property<string>("Department")
                                .HasColumnName("reservation_department")
                                .HasColumnType("character varying(400)")
                                .HasMaxLength(400);

                            b1.Property<string>("EmployeeId")
                                .HasColumnName("reservation_employee_id")
                                .HasColumnType("character varying(400)")
                                .HasMaxLength(400);

                            b1.Property<string>("Name")
                                .HasColumnName("reservation_name")
                                .HasColumnType("character varying(400)")
                                .HasMaxLength(400);

                            b1.Property<string>("PhoneNumber")
                                .HasColumnName("reservation_phone_number")
                                .HasColumnType("character varying(200)")
                                .HasMaxLength(200);

                            b1.Property<DateTime?>("ReservedOn")
                                .HasColumnName("reservation_reserved_on")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<int?>("ReservedThroughOrderId")
                                .HasColumnName("reservation_reserved_through_order_id")
                                .HasColumnType("integer");

                            b1.Property<uint>("xmin")
                                .IsConcurrencyToken()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnName("xmin")
                                .HasColumnType("xid");

                            b1.HasKey("StockItemId")
                                .HasName("pk_stock_items");

                            b1.ToTable("stock_items");

                            b1.WithOwner()
                                .HasForeignKey("StockItemId")
                                .HasConstraintName("fk_stock_items_stock_items_id");
                        });

                    b.OwnsOne("NpgsqlWithOwnedEntities.StockItems.Substance", "Substance", b1 =>
                        {
                            b1.Property<int>("StockItemId")
                                .HasColumnName("id")
                                .HasColumnType("integer");

                            b1.Property<int>("AnicorsRegistryNumber")
                                .HasColumnName("substance_anicors_registry_number")
                                .HasColumnType("integer");

                            b1.Property<decimal?>("AverageMolWeight")
                                .HasColumnName("substance_average_mol_weight")
                                .HasColumnType("numeric");

                            b1.Property<string>("CasRegistryNumber")
                                .HasColumnName("substance_cas_registry_number")
                                .HasColumnType("character varying(100)")
                                .HasMaxLength(100);

                            b1.Property<string>("DensityBaseUnit")
                                .HasColumnName("substance_density_base_unit")
                                .HasColumnType("character varying(50)")
                                .HasMaxLength(50);

                            b1.Property<decimal?>("DensityBaseUnitValue")
                                .HasColumnName("substance_density_base_unit_value")
                                .HasColumnType("numeric");

                            b1.Property<string>("DensityDisplayUnit")
                                .HasColumnName("substance_density_display_unit")
                                .HasColumnType("character varying(50)")
                                .HasMaxLength(50);

                            b1.Property<string>("Description")
                                .HasColumnName("substance_description")
                                .HasColumnType("text");

                            b1.Property<string>("Formula")
                                .HasColumnName("substance_formula")
                                .HasColumnType("character varying(100)")
                                .HasMaxLength(100);

                            b1.Property<string>("HazardPictograms")
                                .HasColumnName("substance_hazard_pictograms")
                                .HasColumnType("text");

                            b1.Property<string>("HazardStatements")
                                .HasColumnName("substance_hazard_statements")
                                .HasColumnType("text");

                            b1.Property<bool?>("IsNarcotic")
                                .HasColumnName("substance_is_narcotic")
                                .HasColumnType("boolean");

                            b1.Property<bool?>("IsRadioactive")
                                .HasColumnName("substance_is_radioactive")
                                .HasColumnType("boolean");

                            b1.Property<string>("IupacName")
                                .HasColumnName("substance_iupac_name")
                                .HasColumnType("character varying(500)")
                                .HasMaxLength(500);

                            b1.Property<string>("MolFile")
                                .HasColumnName("substance_mol_file")
                                .HasColumnType("text");

                            b1.Property<uint>("xmin")
                                .IsConcurrencyToken()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnName("xmin")
                                .HasColumnType("xid");

                            b1.HasKey("StockItemId")
                                .HasName("pk_stock_items");

                            b1.ToTable("stock_items");

                            b1.WithOwner()
                                .HasForeignKey("StockItemId")
                                .HasConstraintName("fk_stock_items_stock_items_id");
                        });
                });

            modelBuilder.Entity("NpgsqlWithOwnedEntities.Stores.Store", b =>
                {
                    b.OwnsOne("NpgsqlWithOwnedEntities.Stores.TemperatureRange", "CoolingTemperature", b1 =>
                        {
                            b1.Property<int>("StoreId")
                                .HasColumnName("id")
                                .HasColumnType("integer");

                            b1.Property<int?>("Max")
                                .HasColumnName("cooling_temperature_max")
                                .HasColumnType("integer");

                            b1.Property<int?>("Min")
                                .HasColumnName("cooling_temperature_min")
                                .HasColumnType("integer");

                            b1.Property<string>("Unit")
                                .IsRequired()
                                .HasColumnName("cooling_temperature_unit")
                                .HasColumnType("character varying(3)")
                                .HasMaxLength(3);

                            b1.Property<uint>("xmin")
                                .IsConcurrencyToken()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnName("xmin")
                                .HasColumnType("xid");

                            b1.HasKey("StoreId")
                                .HasName("pk_stores");

                            b1.ToTable("stores");

                            b1.WithOwner()
                                .HasForeignKey("StoreId")
                                .HasConstraintName("fk_stores_stores_id");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
